// styles.scss
/* Notes
https://sass-lang.com/guide
sass --watch input.scss output.css

You can watch and output to directories by using folder paths as your input and output, and separating them with a colon. In this example:
sass --watch app/sass:public/stylesheets

Partials
You can create partial Sass files that contain little snippets of CSS that you can include in other Sass files. This is a great way to modularize your CSS and help keep things easier to maintain. A partial is a Sass file named with a leading underscore. You might name it something like _partial.scss. The underscore lets Sass know that the file is only a partial file and that it should not be generated into a CSS file. Sass partials are used with the @use rule.
*/

/* Modules */
@use 'base';
@use "sass:math";

.inverse {
  background-color: base.$primary-color;
  color: white;
}

/* Nesting */
nav {
  ul {
    margin: 0;
    padding: 0;
    list-style: none;
  }

  li { display: inline-block; }

  a {
    display: block;
    padding: 6px 12px;
    text-decoration: none;
  }
} 

/* Mixins */
@mixin theme($theme: DarkGray) {
  background: $theme;
  box-shadow: 0 0 1px rgba($theme, .25);
  color: rgb(241, 170, 170);
}

.info {
  @include theme;
}
.alert {
  @include theme($theme: DarkRed);
}
.success {
  @include theme($theme: DarkGreen);
}

/* Extend Inheritance */
/* This CSS will print because %message-shared is extended. */
%message-shared {
  border: 1px solid #ccc;
  padding: 10px;
  color: rgb(108, 108, 108);
}

// This CSS won't print because %equal-heights is never extended.
%equal-heights {
  display: flex;
  flex-wrap: wrap;
}

.message {
  @extend %message-shared;
}

.success {
  @extend %message-shared;
  border-color: green;
}

.error {
  @extend %message-shared;
  border-color: red;
}

.warning {
  @extend %message-shared;
  border-color: yellow;
}

/* Placeholder selectors + Extend/Inheritance 
@url https://sass-lang.com/documentation/style-rules/placeholder-selectors
*/
%toolbelt {
  box-sizing: border-box;
  border-top: 1px rgba(#000, .12) solid;
  padding: 16px 0;
  width: 100%;

  &:hover { border: 2px rgba(#000, .5) solid; }
}

.action-buttons {
  @extend %toolbelt;
  color: #4285f4;
}

.reset-buttons {
  @extend %toolbelt;
  color: #cddc39;
}

/* Operators */

.container {
  display: flex;
}

article[role="main"] {
  width: math.div(600px, 960px) * 100%;
  background-color:rgba(rgb(30, 43, 165), .5);
}

aside[role="complementary"] {
  width: math.div(300px, 960px) * 100%;
  margin-left: auto;
} 

$layers: (
  'navigation',
  'logo',
  'logo-popup',
  'overlay'
);

// @each $layer in $layers {
//   .#{$layer} {
//     z-index: index($layers, $layer);
//   }
// }

@function layer-index($layer) {
  @return index($layers, $layer); //returns the index of the layer in the list
} 

@mixin z-index($layer, $position:relative) {
  $position: $position;
  z-index: layer-index($layer); //set z-index to the index of the layer
}
  
.navigation {
  @include z-index('navigation', absolute);
} 

.logo {
  @include z-index('logo'); //position is relative by default
}

.logo-popup {
  @include z-index('logo-popup', absolute);
}

.overlay {
  @include z-index('overlay', absolute);
}

